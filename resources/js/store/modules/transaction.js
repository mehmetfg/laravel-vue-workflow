import axios from "axios";const state={    transactions:[],    transaction:{},};const getters={    transactions:state=> state.transactions,    transanction:state=>state.transaction};const mutations={    initTransactions(state, transaction){        state.transactions=transaction;    },    initTransaction(state, transaction){        state.transaction=transaction;    },    addTransaction(state, transaction){        state.transactions.push(transaction);    },    updateTransaction(state, transaction){        let index=state.transactions.findIndex(c=> c.id==transaction.id);        if(index>-1){            state.transactions[index]=transaction;        }    },    deleteTransaction(state, transactionID){        let index=state.transactions.findIndex(c=> c.id==transactionID)        if(index>-1){            state.transactions.splice(index, 1)        }    }};const  actions={    initTransactions(context, payload){        axios.get('/backend/transactions/'+payload).then(response=> {            context.commit('initTransactions', response.data.model)        })    },    initTransaction(context, transactionId){        axios.get('/backend/transaction/'+transactionId).then(response=> {            context.commit('initTransaction', response.data.model)        })    },    addTransaction(context, transaction){        axios.post("/backend/transaction", transaction).then(response=> {            if(response.data.type=="success") {                context.commit('addTransaction', {id: response.data.id, ...transaction});            }            swal({                position: 'center',                type: response.data.type,                title: response.data.title,                text: response.data.message,                showConfirmButton: false,                timer: 1500            });         })    },    updateTransaction(context, transaction){        axios.put('/backend/transaction/'+transaction.id, transaction).then(response=> {            if(response.data.type=="success") {                context.commit('updateTransaction', transaction);            }            swal({                position: 'center',                type: response.data.type,                title: response.data.title,                text: response.data.message,                showConfirmButton: false,                timer: 1500            });         })    },    isActiveSetter(context, transaction){        axios.put("/backend/transaction/isActiveSetter/"+transaction.id, transaction).then(response=> {            swal({                position: 'center',                type: response.data.type,                title: response.data.title,                text: response.data.message,                showConfirmButton: false,                timer: 1500            });         })    },    deleteTransaction(context, transactionID){        swal({            title: "SİLME İŞLEMİ",            text: "<b>Silmek İstediğinizden Eminmisiniz!?</b>",            type: 'warning',            showCancelButton: true,            confirmButtonColor: '#3085d6',            cancelButtonColor: '#d33',            confirmButtonText: "Kabul Ediyorum",        }).then((result) => {            if (result.value) {                axios.delete('/backend/transaction/'+ transactionID).then(response=> {                    if(response.data.type=="success") {                        context.commit('deleteTransaction', transactionID)                    }                    swal({                        position: 'center',                        type: response.data.type,                        title: response.data.title,                        text: response.data.message,                        showConfirmButton: false,                        timer: 1500                    });                 })            }        })    }};export default {    state,    mutations,    actions,    getters}