import axios from "axios";const state={    users:[],    user:{},};const getters={    users(state){        return state.users    },    user(state){        return state.user    },};const mutations={    initUsers(state, user){        state.users=user;    },    initUser(state, user){        state.user=user;    },    addUser(state, user){        state.users.push(user);    },    updateUser(state, user){        let index=state.users.findIndex(c=> c.id==user.id);        if(index>-1){            state.users[index]=user;        }    },    deleteUser(state, userID){        let index=state.users.findIndex(c=> c.id==userID)        if(index>-1){            state.users.splice(index, 1)        }    }};const  actions={    initUsers(context){        axios.get('/backend/users').then(response=> {            context.commit('initUsers', response.data.model)        })    },    initUser(context, userId){        axios.get('/backend/user').then(response=> {            context.commit('initUser', response.data.model)        })    },    addUser(context, user){        axios.post("/backend/user", user).then(response=> {            if(response.data.type=="success") {                context.commit('addUser', {id: response.data.id, ...user});            }            swal({                position: 'center',                type: response.data.type,                title: response.data.title,                text: response.data.message,                showConfirmButton: false,                timer: 1500            });         })    },    updateUser(context, user){        axios.put('/backend/user/'+user.id, user).then(response=> {            if(response.data.type=="success") {                context.commit('updateUser', user);            }            swal({                position: 'center',                type: response.data.type,                title: response.data.title,                text: response.data.message,                showConfirmButton: false,                timer: 1500            });         })    },    userStatusSetter(context, user){        axios.post("/backend/user/statusSetter/"+user.id, user).then(response=> {            swal({                position: 'center',                type: response.data.type,                title: response.data.title,                text: response.data.message,                showConfirmButton: false,                timer: 1500            });         })    },    deleteUser(context, userID){        swal({            title: "SİLME İŞLEMİ",            text: "<b>Silmek İstediğinizden Eminmisiniz!?</b>",            type: 'warning',            showCancelButton: true,            confirmButtonColor: '#3085d6',            cancelButtonColor: '#d33',            confirmButtonText: "Kabul Ediyorum",        }).then((result) => {            if (result.value) {                axios.delete('/backend/user/'+ userID).then(response=> {                    if(response.data.type=="success") {                        context.commit('deleteUser', userID)                    }                    swal({                        position: 'center',                        type: response.data.type,                        title: response.data.title,                        text: response.data.message,                        showConfirmButton: false,                        timer: 1500                    });                 })            }        })    }};export default {    state,    mutations,    actions,    getters}