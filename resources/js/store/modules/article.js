import axios from "axios";const state={    articles:[],    article:{},};const getters={    articles:state=> state.articles,    article:state=> state.article};const mutations={    initArticles(state, article){        state.articles=article;    },    initArticle(state, article){        state.article=article;    },    addArticle(state, article){        state.articles.push(article);    },    updateArticle(state, article){        let index=state.articles.findIndex(c=> c.id==article.id);        if(index>-1){            state.articles[index]=article;        }    },    deleteArticle(state, articleID){        let index=state.articles.findIndex(c=> c.id==articleID)        if(index>-1){            state.articles.splice(index, 1)        }    }};const  actions={    initArticles(context){        axios.get('/backend/articles').then(response=> {            context.commit('initArticles', response.data.model)        })    },    initArticle(context, articleId){        axios.get('/backend/article/'+articleId).then(response=> {            context.commit('initArticle', response.data.model)        })    },    addArticle(context, article){        axios.post("/backend/article", article).then(response=> {            if(response.data.type=="success") {                context.commit('addArticle', {id: response.data.id, ...article});            }            swal({                position: 'center',                type: response.data.type,                title: response.data.title,                text: response.data.message,                showConfirmButton: false,                timer: 1500            });         })    },    updateArticle(context, article){        axios.put('/backend/article/'+article.id, article).then(response=> {            if(response.data.type=="success") {                context.commit('updateArticle', article);            }            swal({                position: 'center',                type: response.data.type,                title: response.data.title,                text: response.data.message,                showConfirmButton: false,                timer: 1500            });         })    },    isActiveSetter(context, article){        axios.put("/backend/article/isActiveSetter/"+article.id, article).then(response=> {            swal({                position: 'center',                type: response.data.type,                title: response.data.title,                text: response.data.message,                showConfirmButton: false,                timer: 1500            });         })    },    deleteArticle(context, articleID){        swal({            title: "SİLME İŞLEMİ",            text: "<b>Silmek İstediğinizden Eminmisiniz!?</b>",            type: 'warning',            showCancelButton: true,            confirmButtonColor: '#3085d6',            cancelButtonColor: '#d33',            confirmButtonText: "Kabul Ediyorum",        }).then((result) => {            if (result.value) {                axios.delete('/backend/article/'+ articleID).then(response=> {                    if(response.data.type=="success") {                        context.commit('deleteArticle', articleID)                    }                    swal({                        position: 'center',                        type: response.data.type,                        title: response.data.title,                        text: response.data.message,                        showConfirmButton: false,                        timer: 1500                    });                 })            }        })    }};export default {    state,    mutations,    actions,    getters}